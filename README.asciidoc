
== TRex Low-Cost, High-Speed Stateful Traffic Generator
image:https://img.shields.io/travis/codilime/trex-core/master?label=master&logo=travis-ci&logoColor=BAD7FD[link="https://travis-ci.org/codilime/trex-core"]
image:https://img.shields.io/travis/codilime/trex-core/dev?label=dev&logo=travis-ci&logoColor=BAD7FD[link="https://travis-ci.org/codilime/trex-core"]


TRex is a traffic generator for Stateful and Stateless use cases.

Traditionally, network infrastructure devices have been tested using commercial traffic generators, while the performance was measured using metrics like packets per second (PPS) and No Drop Rate (NDR). As the network infrastructure functionality has become more complex, stateful traffic generators have become necessary in order to test with more realistic application traffic pattern scenarios.
Realistic and Stateful traffic generators are needed in order to:

* Test and provide more realistic performance numbers
* Design and architecture of SW and HW based on realistic use cases

=== Current Challenges

* *Cost*: Commercial State-full traffic generators are expensive
* *Scale*: Bandwidth does not scale up well with features complexity
* *Standardization*: Lack of standardization of traffic patterns and methodologies
* *Flexibility*: Commercial tools do not allow agility when flexibility and changes are needed

=== Implications

* High capital expenditure (capEx) spent by different teams
* Testing in low scale and extrapolation became a common practice, it is not accurate and hides real life bottlenecks and quality issues
* Different feature/platform teams benchmark and results methodology
* Delays in development and testing due to testing tools feature dependency
* Resource and effort investment in developing different ad hoc tools and test methodologies

TRex addresses these problems through an innovative and extendable software implementation and by leveraging standard and open SW and working on COTS x86/ARM server.

=== TRex Stateful/Stateless in a Nutshell

* Fueled by DPDK
* Generates L3-7 traffic and able to provide in one tool capabilities provided by commercial tools.
* Stateful/Stateless traffic generator.
* Scale to 200Gb/sec 
* Python automation API
* Low cost
* Virtualization support. Enable TRex to be used in a fully virtual environment without physical NICs and the following example use cases:
** Amazon AWS
** TRex on your laptop
** Docker 
** Self-contained packaging
* Cisco Pioneer Award Winner 2015

=== Current TRex DPDK interfaces supported

* Support Physical DPDK 1/2.5/10/25/50/40/100Gbps interfaces (Intel/Mellanox/Cisco VIC/Napatech/Amazon ENA)
* Virtualization interfaces support (virtio/VMXNET3/E1000)
* SR-IOV support for best performance

=== Current Stateful TRex Feature sets (STF)

This feature is for stateful features that inspect the traffic. 

* High scale of realistic traffic (number of clients, number of server, bandwidth)
* Latency/Jitter measurements
* Flow ordering checks
* NAT, PAT dynamic translation learning
* Learn TCP SYN sequence randomization - vASA/Firepower use case
* Cluster mode for Controller tests
* IPV6 inline replacement
* Some cross flow support (e.g RTSP/SIP)

=== TRex Stateless feature sets  (STL)

This feature is for Stateless features that do routing/switching e.g. Cisco VPP/OVS. It is more packet based.

* Large-scale - Supports about 10-30 million packets per second (Mpps) per core, scalable with the number of cores
* Profile can support multiple streams, scalable to 10K parallel streams
* Supported for each stream:
** Packet template - ability to build *any* packet (including malformed) using link:https://en.wikipedia.org/wiki/Scapy[Scapy] (example: MPLS/IPv4/Ipv6/GRE/VXLAN/NSH)
** Field engine program
*** Ability to change any field inside the packet (example: src_ip = 10.0.0.1-10.0.0.255)
*** Ability to change the packet size (example: random packet size 64-9K)
** Mode - Continuous/Burst/Multi-burst support
** Rate can be specified as:
*** Packets per second (example: 14MPPS)
*** L1/L2 bandwidth (example: 500Mb/sec)
*** Interface link percentage (example: 10%)
** Support for basic HLTAPI-like profile definition
** Action - stream can trigger a stream
* Interactive support - Fast Console,  GUI
* Statistics per interface
* Statistics per stream done in hardware/software
* Latency and Jitter per stream
* Blazingly fast Python automation API 
* L2 Emulation Python event-driven framework with examples of ARP/ICMP/ICMPv6/IPv6ND/DHCP and more. The framework can be extendable with new protocols
* Capture/Monitor traffic with BPF filters - no need for Wireshark
* Capture network traffic by redirecting the traffic to Wireshark
* Functional tests
* PCAP file import/export
* Huge pcap file transmission  (e.g. 1TB pcap file) for DPI
* Multi-user support

The following example shows three streams configured for Continuous, Burst, and Multi-burst traffic.

image::https://trex-tgn.cisco.com/trex/doc/images/stl_streams_example_02.png[title="",align="center",width=600, link="http://trex-tgn.cisco.com/trex/doc/images/stl_streams_example_02.png"]

A new JSON-RPC2 Architecture  provides support for interactive mode

image::https://trex-tgn.cisco.com/trex/doc/images/trex_architecture_01.png[title="",align="center",width=600, link="http://trex-tgn.cisco.com/trex/doc/images/trex_architecture_01.png"]

more info can be found here link:https://trex-tgn.cisco.com/trex/doc/index.html[Documentation]

=== TRex Advance Stateful feature sets (ASTF)

With the new advanced scalable TCP/UDP support, TRex uses TCP/UDP layer for generating the L7 data. This opens the following new capabilities:

* Ability to work when the DUT terminates the TCP stack (e.g. compress/uncompress). In this case, there is a different TCP session on each side, but L7 data are *almost* the same.
* Ability to work in either client mode or server mode. This way TRex client side could be installed in one physical location on the network and TRex server in another.
* Performance and scale
** High bandwidth - 200gb/sec with many realistic flows (not one elephant flow )
** High connection rate - order of MCPS
** Scale to millions of active established flows
* Emulate L7 application, e.g. HTTP/HTTPS/Citrix- there is no need to implement the exact protocol.
* Accurate TCP implementation 
* Ability to change fields in the L7 application - for example, change HTTP User-Agent field

more information can be found here:

* link:https://communities.cisco.com/community/developer/trex/blog/2017/06/20/trex-upcoming-stateful-scalable-tcp-support[scalable TCP]
* link:https://trex-tgn.cisco.com/trex/doc/trex_astf.html[ASTF documentation] 
* link:https://trex-tgn.cisco.com/trex/doc/trex_astf_vs_nginx.html[ASTF Performance]

=== What it is not

* Routing protocol support integration for BGP/ISIS (routem) is internal.

=== What you can do with it

==== Stateful

* Benchmark/Stress stateful features :
** NAT
** DPI
** Load Balancer
** Network cache devices
** FireWall
** IPS/IDS
* Mixing Application level traffic/profile (HTTP/SIP/Video)
* Unlimited concurrent flows, limited only by memory

==== Stateless

* Benchmark/Stress vSwitch RFC2544

=== Presentation

link:http://www.slideshare.net/HanochHaim/trex-realistic-traffic-generator-stateless-support[New Stateless support]

link:http://www.slideshare.net/harryvanhaaren/trex-traffig-gen-hanoch-haim[DPDK summit 2015]

link:http://www.youtube.com/watch?v=U0gRalB7DOs[Video DPDK summit 2015]

link:https://trex-tgn.cisco.com/trex/doc/trex_preso.html[Presentation]


=== Documentation

link:https://trex-tgn.cisco.com/trex/doc/index.html[Documentation]

=== Wiki

Internal link:https://github.com/cisco-system-traffic-generator/trex-core/wiki[Wiki]

=== How to build

Internal link:https://github.com/cisco-system-traffic-generator/trex-core/wiki[Wiki]

=== YouTrack

Report bug/request feature link:https://trex-tgn.cisco.com/youtrack/issues[YouTrack]


=== Blogs

blogs can be found  TRex link:https://communities.cisco.com/community/developer/trex/blog[blog]


=== Stateless Client GUI

* Cross-Platform - runs on Windows, Linux, Mac OS X
* Written in JavaFX use TRex RPC API
* Scapy base packet builder to build any type of packet using GUI
**  very easy to add new protocols builders (using scapy)
* Open and edit PCAP files, replay and save back
* visual latency/jitter/per stream statistic
* Free

Github is here link:https://github.com/cisco-system-traffic-generator/trex-stateless-gui[trex-stateless-gui]

image::doc/images/t_g1.gif[title="",align="center",width=300, link="https://github.com/cisco-system-traffic-generator/trex-core/tree/master/doc/images/t_g1.gif"]

=== Sandbox for evaluation

Try the new Devnet Sandbox link:https://devnetsandbox.cisco.com/RM/Topology[TRex Sandbox]

=== Contact Us

Follow us on https://groups.google.com/forum/#!forum/trex-tgn[TRex traffic generator google group],

Or contact via: mailto:trex-tgn@googlegroups.com[Group mailing list (trex-tgn@googlegroups.com)]


=== Who is using TRex?

* VPP performance/functional tests, link:https://fd.io/[fd.io] 
* VNF tests link:https://wiki.opnfv.org/display/fds/NFVBENCH+performance+testing+demo+for+FDS[OPNFV-NFVBENCH]
* link:http://dpdk.org/ml/archives/ci/2017-November/000143.html[DPDK UNH lab]
* link:https://developers.redhat.com/blog/2017/09/28/automated-open-vswitch-pvp-testing/[Open vSwitch PVP]
* Napatech delivers 100Gb/sec link:https://www.prnewswire.com/news-releases/napatech-delivers-stunning-100-gige-performance-for-trex-300601690.html[Napatech]
* https://community.mellanox.com/docs/DOC-2958[Mellanox]

=== Roadmap

* Improve advanced Stateful capability
** Simulate latency/jitter/drop in high rate
** Integration with OpenSSL. Work on top of TLS 
* Stateless
** scalable and more flexible per stream statistic
** mini L2 emulation services.  Will run  in server side for emulation protocols in paralel to traffic



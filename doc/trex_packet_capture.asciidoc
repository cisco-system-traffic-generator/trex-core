
[IMPORTANT]
This section is relevant only for service mode.

In service mode, TRex provides a few ways to examine and manipulate both Rx and Tx packets.


Packet capturing is implemented by allocating one more more fast, in-memory queues on the server side that copy-and-store the packet buffer.


Each queue can be defined with the following attributes:

* Storage
* Which ports on either Tx/Rx it should capture
* Whether it should be 'cyclic' or 'fixed'

image::images/packet_capture_arch.png[title="Packet Captruing Architecture",align="left",width={p_width}, link="images/packet_capture_arch.png"]

// the image should be saved without the red squiggley underscores (for spell-check) under words like Scapy and Wireshark

The above architecture implies that we can 'capture' at high speed for a short amount of time.

For example, a queue of 1 million packets can be allocated as a cyclic queue and be active with a rate of couple of MPPS. This effectively provides a sampling of the last 1 million packets seen by the server with the given filters.

==== BPF Filtering

Before demonstrating how to use *Packet Capturing*, it is helpful to review how *filtering* is done.


Each packet capture is assigned a filter (by default, a filter that matches any packet). Any filter that follows the syntax rules of *The Berekely Packet Filter (BPF)* can be assigned.


BPF filters are widely used by the Linux kernel, TCP dump and others. Basically any 'tcpdump' filtering tutorial can be used to define a filter for TRex.


Some simple examples using *BPF*:

* All 'ARP' or 'ICMP' packets:

[source,bash]
----
'arp or icmp'
----

* All 'UDP' packets with destination port 53:
[source,bash]
----
'udp and dst 53'
----

* All packets 'VLAN' tagged '200' and 'TCP SYN':
[source,bash]
----
'vlan 200 and tcp[tcpflags] == tcp-syn'
----

For more examples, refer to BPF and tcpdump examples available online.

==== BPFJIT

TRex server uses *BPF JIT*, a compiled version of BPF to native code, to allow very fast filtering. So 'high speed filtering' is very much possible in TRex.

*Before* +

The following is a snapshot of a XL710 with Intel(R) Xeon(R) CPU E5-2667 v3 @ 3.20GHz handling 15.72 mpps *before* applying a BPF filter.


[source,python]
----
Global Statistics

connection   : localhost, Port 4501                  total_tx_L2  : 8.18 Gb/sec
version      : v2.28                                 total_tx_L1  : 10.73 Gb/sec
cpu_util.    : 3.31% @ 14 cores (7 per port)         total_rx     : 8.18 Gb/sec
rx_cpu_util. : 82.0% / 15.72 Mpkt/sec <1>             total_pps    : 15.97 Mpkt/sec
async_util.  : 0.19% / 1.76 KB/sec                   drop_rate    : 0.00 b/sec
                                                     queue_full   : 0 pkts

----


*After* 

With a 'non-hitting' filter to measure the effect of using the BPF filter:


[source,python]
----
Global Statistics

connection   : localhost, Port 4501                  total_tx_L2  : 8.21 Gb/sec
version      : v2.28                                 total_tx_L1  : 10.77 Gb/sec
cpu_util.    : 3.37% @ 14 cores (7 per port)         total_rx     : 8.21 Gb/sec
rx_cpu_util. : 86.4% / 15.63 Mpkt/sec <1>             total_pps    : 16.03 Mpkt/sec
async_util.  : 0.21% / 1.64 KB/sec                   drop_rate    : 0.00 b/sec
                                                     queue_full   : 0 pkts

----


There is almost zero impact (<5%) on CPU utilization for negative filtering.

Of course, a hitting filter will have impact but usually on a very small portion of the traffic.


==== API usage

Using the Python API is fairly simple:

.Python API:
[source,python]
----

# move port 1 to service mode as we want to capture traffic on it
client.set_service_mode(ports = 1)

# start a capture on port 1 Rx side with a limit, a mode and a *BPF* filter for any UDP with dst port 53
capture = client.start_capture(rx_ports = 1, limit = 100, mode = 'fixed', bpf_filter = 'udp and dst 53')

# execute your code here

# save the packets to a file or to a list (see the Python API docs)
client.stop_capture(capture['id'], '/home/mydir/port_0_rx.pcap')

# exit service mode on port 1
client.set_service_mode(ports = 1, enabled = False)

----

==== Console usage

The console provides couple of flexible ways to handle packet capturing

* *Capture Monitoring*
* *Capture Recording*

===== Capture monitoring
Capture monitoring is a non-persistent method for capturing and showing packets from either Tx / Rx of one or more ports.


Monitoring has 3 modes:

* *Low Verbose*    - A short line per packet will be displayed
* *High Verbose*   - Full Scapy show will be displayed per packet
* *Wireshark Pipe* - Launches Wireshark with a pipe connected to the traffic being captured


The first two options display packet information *on the console*. This is ideal if a moderate amount of traffic is being monitored. However, if a large amount of traffic is being monitored, consider *Wireshark Pipe* or the *Capture Recording* method.

.*Example of capturing traffic using the console with verbose on*

[source,python]
----
trex>service                                                                  <1>

Enabling service mode on port(s) [0, 1, 2, 3]:               [SUCCESS]      

trex(service)>capture monitor start --rx 3 -v                                 <2>

Starting stdout capture monitor - verbose: 'high'            [SUCCESS]


*** use 'capture monitor stop' to abort capturing... ***

trex(service)>arp -p 3                                                        <3>

Resolving destination on port(s) [3]:                        [SUCCESS]

Port 3 - Recieved ARP reply from: 1.1.1.1, hw: 90:e2:ba:ae:88:b8              <4>
38.14 [ms]

trex(service)>

#1 Port: 3 -- Rx

    Type: ARP, Size: 60 B, TS: 16.98 [sec]

    ###[ Ethernet ]###
      dst       = 90:e2:ba:af:13:89
      src       = 90:e2:ba:ae:88:b8
      type      = 0x806
    ###[ ARP ]###
         hwtype    = 0x1
         ptype     = 0x800
         hwlen     = 6
         plen      = 4
         op        = is-at                                                    <5>
         hwsrc     = 90:e2:ba:ae:88:b8
         psrc      = 1.1.1.1
         hwdst     = 90:e2:ba:af:13:89
         pdst      = 4.4.4.4
    ###[ Padding ]###
            load      = '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'


trex(service)>
----
<1> Move to *service mode* to allow capturing.
<2> Activate a capture monitor on port *3* Rx side with *verbose* on.
<3> Send an ARP request on port *3*.
<4> The console shows the returning packet.
<5> *is-at* ARP response was captured.



.*Example of capturing traffic using Wireshark pipe*

[source,python]
----
trex(service)>capture monitor start --rx 3 -f udp -p                          <1>

Starting pipe capture monitor                                [SUCCESS]


Trying to locate Wireshark                                   [SUCCESS]


Checking permissions on '/usr/bin/dumpcap'                   [SUCCESS]


Launching '/usr/bin/wireshark -k -i /tmp/tmputa4jf3c'        [SUCCESS]        <2>


Waiting for Wireshark pipe connection                        [SUCCESS]        <3>


*** Capture monitoring started ***                                            <4>

trex(service)>arp                                                             <5>

Resolving destination on port(s) [0, 1, 2, 3]:               [SUCCESS]

Port 0 - Recieved ARP reply from: 4.4.4.4, hw: 90:e2:ba:af:13:89
Port 1 - Recieved ARP reply from: 3.3.3.3, hw: 90:e2:ba:af:13:88
Port 2 - Recieved ARP reply from: 2.2.2.2, hw: 90:e2:ba:ae:88:b9
Port 3 - Recieved ARP reply from: 1.1.1.1, hw: 90:e2:ba:ae:88:b8

----
<1> Activate a monitor using a Wireshark pipe and a UDP filter (BPF).
<2> Attempts to launch Wireshark with a connection to the pipe.
<3> Console is blocked until connection is established.
<4> Monitor is active.
<5> Sends ARP request.


image::images/capture_wireshark_pipe.png[title="Wireshark Pipe",align="left",width={p_width}, link="images/capture_wireshark_pipe.png"]

===== Capture recording

In addition to monitoring, the console allows a simple recording as well. Recording enables you to define a fixed-size queue which then can be saved to a PCAP file.

.*Example of capturing a traffic to a fixed size queue*

[source,python]
----
trex(service)>capture record start --rx 3 --limit 200                         <1>

Starting packet capturing up to 200 packets                  [SUCCESS]

*** Capturing ID is set to '4' ***                                            <2>
*** Please call 'capture record stop --id 4 -o <out.pcap>' when done ***

trex(service)>capture                                                         <3>

Active Recorders

      ID        |     Status      |     Packets     |      Bytes      |    TX Ports     |    RX Ports
 ------------------------------------------------------------------------------------------------------
       4        |     ACTIVE      |     [0/200]     |       0 B       |        -        |        3



trex(service)>start -f stl/imix.py -m 1kpps -p 0 --force                      <4>

Removing all streams from port(s) [0]:                       [SUCCESS]


Attaching 3 streams to port(s) [0]:                          [SUCCESS]


Starting traffic on port(s) [0]:                             [SUCCESS]

20.42 [ms]

trex(service)>capture                                                         <5>

Active Recorders

      ID        |     Status      |     Packets     |      Bytes      |    TX Ports     |    RX Ports
 ------------------------------------------------------------------------------------------------------
       4        |     ACTIVE      |    [200/200]    |    74.62 KB     |        -        |        3


trex(service)>capture record stop --id 4 -o /tmp/rx_3.pcap                    <6>

Stopping packet capture 4                                    [SUCCESS]


Writing 200 packets to '/tmp/rx_3.pcap'                      [SUCCESS]


Removing PCAP capture 4 from server                          [SUCCESS]

trex(service)>

----
<1> Start a packet record on port *3* Rx side with a limit of *200* packets.
<2> A new capture is created with an ID *4*.
<3> Show the capture status - currently empty.
<4> Start traffic on port *0*, which is connected to port *3*.
<5> Show the capture status - full.
<6> Save 200 packets to an output file: */tmp/rx_3.pcap*


==== Using capture as a counter

Another use of packet capturing is 'counting'. Instead of fetching the packets, you can simply count packets that hit the BPF filter.

For example, to count any packet that is 'UDP' with source port of '5000', you can simply attach an 'empty' capture with the correct BPF filter and examine the 'matched' field:

[source,python]
----

trex(service)>capture record start --rx 3 --limit 0 -f udp and src 5000

Starting packet capturing up to 0 packets                    [SUCCESS]

*** Capturing ID is set to '14' ***
*** Please call 'capture record stop --id 14 -o <out.pcap>' when done ***

trex(service)>capture

Active Recorders

    ID     |   Status    |  Matched   |    Packets     |   Bytes    |    RX Ports     |   BPF Filter
 -------------------------------------------------------------------------------------------------------
    14     |   ACTIVE    |      0     |     [0/0]      |    0 B     |        3        | udp and src 5000

trex(service)>

----

The *Matched* field indicates how many packets matched the filter.


==== Using capture port for faster packet capture / packet injection

Using the packet capture mechanism to inspect packets on TRex client python side typically yields to a transfer rate of about 5000 packets/sec due to the polling nature and the overhead of the RPC protocol.

In order to do faster packet transfer between TRex server and TRex client, as well as improving the injection of packets, the
capture port feature can be used. It typically runs about 4x faster than the TRex capture.

This feature enables oneTRex server to connect to an already-opened ZeroMQ socket that will
solely used to send / receive raw packets for a given TRex port. Pushing some data on this socket will translate to a new
packet sent on the TRex port, while the packets received on the port will sent over the ZeroMQ socket as well.

Optionally, a BPF filter can be also specified to restrict the packets sent from TRex server to the TRex client side.

Here is a usage example that will first send one packet on TRex port 0, and then blocks until one IP packet is received back:

[source,python]
----

import zmq
# Bind our ZeroMQ socket so that the TRex server can connect to it
capture_port = "ipc:///tmp/trex_capture_port"
zmq_context = zmq.Context()
zmq_socket = zmq_context.socket(zmq.PAIR)
zmq_socket.bind(capture_port)

# move port 0 to service mode as we want to start capture port on it
client.set_service_mode(ports = 0)

# start a trex capture port on port 0 with *BPF* filter for any IP packets
client.start_capture_port(port = 0, endpoint = capture_port, bpf_filter = 'ip')

# Send one packet (using scapy here)
zmq_socket.send(bytes(Ether()/IP()/IP()/UDP()))

# Wait until we get an IP packet on TRex port 0 and display it parsed using Scapy
received_packet = zmq_socket.recv()
Ether(received_packet).show2()

# Stop capture port
client.stop_capture_port(port = 0)

# exit service mode on port 0
client.set_service_mode(ports = 0, enabled = False)


----


==== Video tutorials 

ifdef::backend-xhtml11[]
++++++++++++++++++

<iframe width="420" height="315"
allowfullscreen="allowfullscreen"
src="https://www.youtube.com/embed/Vsb0A4RNGz0">
</iframe>
++++++++++++++++++
endif::backend-xhtml11[]

This tutorial demonstrates the new packet capture ability.


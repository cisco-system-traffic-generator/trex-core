

anchor:service_mode[]

In 'normal operation mode', to preserve high speed processing of packets, TRex ignores most of the rx traffic, with the exception of counting/statistic and handling latency flows.

The *modes*:

1. *On* : All the packets are forwarded to rx to be processed by Client or Capture.
2. *Off* - Only latency packets are forwarded. Before v2.66 non TCP UDP were forward to rx in software mode after v2.66 (including) only in filter mode those packets are forwarded for more flexibility.
3. *Filter* [bgp, no_tcp_udp, emu, transport, mdns, dhcp, all] - In this case specific packets are forwarded to rx. An example can be BGP packets for BIRD. It is relevant only for software mode, `--software`
Using filter mode you would be able to run TCP/UDP traffic in high rate while keeping the routing protocols function. The performance would be as good as "off", the only penalty comes from the software mode that requires all packets to be processed in the rx side. 

[NOTE]
=====================================================================
Filter mode is new from version v2.66
=====================================================================

The following illustrates how rx packets are handled. Only a portion are forwarded to the rx handling module and none are forwarded back to the Python client.

image::images/port_normal_mode.png[title="Port Under Normal Mode",align="left",width={p_width}, link="images/port_normal_mode.png"]


In *service mode*, a port responds to ping and ARP requests, and also enables forwarding packets to the Python control plane for applying full duplex protocols (DHCP, IPv6 neighboring, and so on).

The following illustrates how packets can be forwarded back to the Python client.

image::images/port_service_mode.png[title="Port Under Service Mode",align="left",width={p_width}, link="images/port_service_mode.png"]

Service mode can be useful when writing Python plugins for emulation (example: IPV6 ND/DHCP) to prepare the setup. Then you can move to normal mode for high speed testing.


.*Example of switching between Service and Normal modes*
[source,bash]
----

trex>service --help
usage: service [-h] [-p PORTS [PORTS ...] | -a] [--bgp] [--dhcp] [--mdns]
               [--emu] [--tran] [--no-tcp-udp] [--all] [--off]

Configures port for service mode. In service mode ports will reply to ARP,
PING and etc.

optional arguments:
  -h, --help            show this help message and exit
  -p PORTS [PORTS ...], --port PORTS [PORTS ...]
                        A list of ports on which to apply the command
  -a                    Set this flag to apply the command on all available
                        ports

  --bgp                 filter mode with bgp packets forward to rx
  --dhcp                filter mode with dhcpv4/dhcpv6 packets forward to rx
  --mdns                filter mode with mDNS packets forward to rx
  --emu                 filter mode for all emu services rx
  --tran                filter mode with tcp/udp packets forward to rx
                        (generated by emu)
  --no-tcp-udp          filter mode with no_tcp_udp packets forward to rx
  --all                 Allow every filter possible
  --off                 Deactivates services on port(s)

trex>service

Enabling service mode on port(s) [0, 1]:                     [SUCCESS]

trex(service)>service --off

Disabling service mode on port(s) [0, 1]:                    [SUCCESS]

----

.*Example Of switching between Service and Normal modes: API*
[source,Python]
----

  client.set_service_mode(ports = [0, 1], enabled = True)
  
  client.set_service_mode(ports = [0, 1], enabled = False)

----

==== ARP / ICMP response
[IMPORTANT]
Only when in service mode, ports will reply to ICMP echo requests and ARP requests.

